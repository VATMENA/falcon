// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String  @id @unique
  cid         String  @unique
  full_name   String?
  rating      String
  subdivision String  @default("")

  access           Boolean         @default(false)
  division_role    DivisionRole    @default(Other)
  subdivision_role SubdivisionRole @default(Other)

  auth_session Session[]
  auth_key     Key[]
}

enum DivisionRole {
  Admin
  ATC
  Membership
  Other
}

enum SubdivisionRole {
  Director
  ATC
  Mentor
  Other
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Solo {
  id         String   @id @unique @default(uuid())
  cid        String   @unique
  full_name  String
  position   String
  expiry     DateTime
  instructor String
  count      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Log {
  id         String   @id @unique @default(uuid())
  type       LogType
  cid        String
  message    String
  created_at DateTime @default(now())
}

model TransferRequest {
  id          String   @id @unique @default(uuid())
  cid         String
  comment     String
  subdivision String
  created_at  DateTime @default(now())
}

model UpgradeRequest {
  id         String   @id @unique @default(uuid())
  cid        String
  comment    String
  scoresheet String?
  rating     Int
  created_at DateTime @default(now())
}

model SoloRequest {
  id         String   @id @unique @default(uuid())
  cid        String
  full_name  String
  position   String
  expiry     DateTime
  instructor String
  created_at DateTime @default(now())
  count      Int      @default(0)
}

model Instructor {
  id          String         @id @unique @default(uuid())
  cid         String         @unique
  full_name   String
  type        InstructorType
  subdivision String
  created_at  DateTime       @default(now())
}

model ApiKey {
  id  Int    @unique @default(autoincrement())
  key String @unique
}

model Examination {
  id         String   @id @unique @default(uuid())
  cid        String   @unique
  full_name  String
  position   String
  exam_date  DateTime
  instructor String
  approved   Boolean?
  created_at DateTime @default(now())
}

enum LogType {
  UPGRADE
  TRANSFER
  SOLO
  INSTRUCTOR
  HQ
  EXAM
}

enum InstructorType {
  SENIOR
  INSTRUCTOR
}
